diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..56b2ad5e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,17 @@
+*.dtb
+*.dtbo
+*.o
+*.o.mod
+*.mod
+*.cmd
+*.ko
+*.mod.c
+*.o.d
+*.order
+*.symvers
+
+mods.dtb.S
+.mods.dtb.dts.tmp
+.mods.dtb.d.pre.tmp
+.mods.dtb.d.dtc.tmp
+nvethernetrm
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 7c5913c6..39dfff3d 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -19,6 +19,7 @@ obj-m += nv_imx390.o
 obj-m += nv_imx477.o
 obj-m += nv_ov5693.o
 obj-m += nv_ar0234.o
+obj-m += nv_ar0233.o
 obj-m += nv_hawk_owl.o
 endif
 
diff --git a/drivers/media/i2c/ar0233_mode_tbls.h b/drivers/media/i2c/ar0233_mode_tbls.h
new file mode 100644
index 00000000..cc091f29
--- /dev/null
+++ b/drivers/media/i2c/ar0233_mode_tbls.h
@@ -0,0 +1,1230 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2018-2024, NVIDIA CORPORATION & AFFILIATES. All Rights Reserved. */
+/*
+ * ar0233_mode_tbls.h - ar0233 sensor mode tables
+ */
+#ifndef __AR0233_I2C_TABLES__
+#define __AR0233_I2C_TABLES__
+
+#include <media/camera_common.h>
+
+#define AR0233_TABLE_WAIT_MS	0xff00
+#define AR0233_TABLE_END	0xff01
+#define AR0233_MAX_RETRIES	3
+#define AR0233_WAIT_MS_STOP	1
+#define AR0233_WAIT_MS_START	30
+#define AR0233_WAIT_MS_STREAM	210
+#define AR0233_GAIN_TABLE_SIZE 255
+
+#define AR0233_EEPROM_ADDRESS		0x54
+#define AR0233_EEPROM_ADDRESS_R         0x58
+#define AR0233_EEPROM_SIZE              512
+#define AR0233_EEPROM_STR_SIZE          (AR0233_EEPROM_SIZE * 2)
+#define AR0233_EEPROM_BLOCK_SIZE        (1 << 8)
+#define AR0233_EEPROM_NUM_BLOCKS \
+	(AR0233_EEPROM_SIZE / AR0233_EEPROM_BLOCK_SIZE)
+
+
+#define ar0233_reg struct reg_16
+
+struct index_reg_8 {
+	u16 source;
+	u16 addr;
+	u16 val;
+};
+
+static struct index_reg_8 ar0233_sensor[] = {
+{0x20, 0x301A, 0x0059},
+{0x20, AR0233_TABLE_WAIT_MS, 1},
+{0x20, 0x301A, 0x0058},
+{0x20, 0x3064, 0x0000},
+{0x20, 0x3C72, 0x0076},
+{0x20, 0x3C74, 0x0031},
+{0x20, 0x3C76, 0x00DC},
+{0x20, 0x3C78, 0x01AA},
+{0x20, 0x3C7A, 0x0352},
+{0x20, 0x3C7C, 0x06AA},
+{0x20, 0x356A, 0x81AA},
+{0x20, 0x3568, 0x0028},
+{0x20, 0x37B2, 0x1FFF},
+{0x20, 0x3562, 0x0C08},
+{0x20, 0x3520, 0x0080},
+{0x20, 0x353C, 0x9A8A},
+{0x20, 0x3576, 0x1DFF},
+{0x20, 0x3544, 0x030F},
+{0x20, 0x3534, 0x3898},
+{0x20, 0x353A, 0x9A9A},
+{0x20, 0x356E, 0x048A},
+{0x20, 0x3564, 0x1223},
+{0x20, 0x3508, 0xAF1A},
+{0x20, 0x3086, 0x0000},
+{0x20, 0x34BA, 0x0001},
+{0x20, 0x34B8, 0x0001},
+{0x20, 0x3550, 0x806C},
+{0x20, 0x3522, 0x0519},
+{0x20, 0x3E3E, 0x000C},
+{0x20, 0x3092, 0x408C},
+{0x20, 0x3530, 0x1F18},
+{0x20, 0x350E, 0x2092},
+{0x20, 0x336E, 0x0142},
+{0x20, 0x3364, 0x0766},
+{0x20, 0x3528, 0xE008},
+{0x20, 0x351A, 0xF400},
+{0x20, 0x357A, 0x0044},
+{0x20, 0x3514, 0x5B5B},
+{0x20, 0x3578, 0x5B5B},
+{0x20, 0x3526, 0x1000},
+{0x20, 0x3518, 0x4444},
+{0x20, 0x352A, 0x0827},
+{0x20, 0x3548, 0x3A2A},
+{0x20, 0x354A, 0x323C},
+{0x20, 0x3512, 0x0EDC},
+{0x20, 0x352C, 0xA800},
+{0x20, 0x2512, 0x8000},
+{0x20, 0x2510, 0x070F}, 
+{0x20, 0x2510, 0x1011}, 
+{0x20, 0x2510, 0x1216}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0x191A}, 
+{0x20, 0x2510, 0x1E1F}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0x213F}, 
+{0x20, 0x2510, 0x5071}, 
+{0x20, 0x2510, 0x8489}, 
+{0x20, 0x2510, 0x8C8F}, 
+{0x20, 0x2510, 0x92FF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xC003}, 
+{0x20, 0x2510, 0x805A}, 
+{0x20, 0x2510, 0xA0E0}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3048}, 
+{0x20, 0x2510, 0x3088}, 
+{0x20, 0x2510, 0x30A0},
+{0x20, 0x2510, 0x3090}, 
+{0x20, 0x2510, 0x32C2}, 
+{0x20, 0x2510, 0xA0C0}, 
+{0x20, 0x2510, 0x9008}, 
+{0x20, 0x2510, 0x8802}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x9018}, 
+{0x20, 0x2510, 0x891A}, 
+{0x20, 0x2510, 0x807E}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x895B}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x897B}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x897F}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xA0C4}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x805A}, 
+{0x20, 0x2510, 0x9039}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x907F}, 
+{0x20, 0x2510, 0x895B}, 
+{0x20, 0x2510, 0x2064}, 
+{0x20, 0x2510, 0x891B}, 
+{0x20, 0x2510, 0x2010}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x20FF}, 
+{0x20, 0x2510, 0x906B}, 
+{0x20, 0x2510, 0x2064}, 
+{0x20, 0x2510, 0x3084}, 
+{0x20, 0x2510, 0x2003}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2400}, 
+{0x20, 0x2510, 0x2401}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2400}, 
+{0x20, 0x2510, 0x2401}, 
+{0x20, 0x2510, 0x2702}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2421}, 
+{0x20, 0x2510, 0x2703}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2421}, 
+{0x20, 0x2510, 0x2704}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2421}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2741}, 
+{0x20, 0x2510, 0x2428}, 
+{0x20, 0x2510, 0x2740}, 
+{0x20, 0x2510, 0x2428}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xB800}, 
+{0x20, 0x2510, 0x8058}, 
+{0x20, 0x2510, 0xA005}, 
+{0x20, 0x2510, 0x3101}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3104}, 
+{0x20, 0x2510, 0xB035}, 
+{0x20, 0x2510, 0xB075}, 
+{0x20, 0x2510, 0x30C1}, 
+{0x20, 0x2510, 0x3102}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0xB808}, 
+{0x20, 0x2510, 0x3202}, 
+{0x20, 0x2510, 0xB848}, 
+{0x20, 0x2510, 0xB84C}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0xB377}, 
+{0x20, 0x2510, 0x8843}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0xB84E}, 
+{0x20, 0x2510, 0xF905}, 
+{0x20, 0x2510, 0xF907}, 
+{0x20, 0x2510, 0x2200}, 
+{0x20, 0x2510, 0x885B}, 
+{0x20, 0x2510, 0xA898}, 
+{0x20, 0x2510, 0xA8D8}, 
+{0x20, 0x2510, 0xF8E8}, 
+{0x20, 0x2510, 0x80D8}, 
+{0x20, 0x2510, 0x9007}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2206}, 
+{0x20, 0x2510, 0xB808}, 
+{0x20, 0x2510, 0xC800}, 
+{0x20, 0x2510, 0xE809}, 
+{0x20, 0x2510, 0x88DB}, 
+{0x20, 0x2510, 0xF8A8}, 
+{0x20, 0x2510, 0xF888}, 
+{0x20, 0x2510, 0x2203}, 
+{0x20, 0x2510, 0xB07B}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x80C8}, 
+{0x20, 0x2510, 0x8088}, 
+{0x20, 0x2510, 0x220B}, 
+{0x20, 0x2510, 0xB06A}, 
+{0x20, 0x2510, 0x88CB}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x2224}, 
+{0x20, 0x2510, 0xB04A}, 
+{0x20, 0x2510, 0x2218}, 
+{0x20, 0x2510, 0x210D}, 
+{0x20, 0x2510, 0x2108}, 
+{0x20, 0x2510, 0x902F}, 
+{0x20, 0x2510, 0xB04B}, 
+{0x20, 0x2510, 0xF880}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x2203}, 
+{0x20, 0x2510, 0x9800}, 
+{0x20, 0x2510, 0xB043}, 
+{0x20, 0x2510, 0xA8C9}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0x80A8}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2104}, 
+{0x20, 0x2510, 0x88AB}, 
+{0x20, 0x2510, 0x2104}, 
+{0x20, 0x2510, 0xB808}, 
+{0x20, 0x2510, 0x9800}, 
+{0x20, 0x2510, 0x2440}, 
+{0x20, 0x2510, 0xF110}, 
+{0x20, 0x2510, 0xF804}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x8088}, 
+{0x20, 0x2510, 0x3002}, 
+{0x20, 0x2510, 0xB838}, 
+{0x20, 0x2510, 0xA8C8}, 
+{0x20, 0x2510, 0xB04B}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0x3210}, 
+{0x20, 0x2510, 0x2206}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x2203}, 
+{0x20, 0x2510, 0xF1CB}, 
+{0x20, 0x2510, 0xF1CC}, 
+{0x20, 0x2510, 0xF1CC}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0x3202}, 
+{0x20, 0x2510, 0xF880}, 
+{0x20, 0x2510, 0xB830}, 
+{0x20, 0x2510, 0xC801}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0xE80C}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0xB04A}, 
+{0x20, 0x2510, 0x2226}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x3241}, 
+{0x20, 0x2510, 0x2206}, 
+{0x20, 0x2510, 0x902F}, 
+{0x20, 0x2510, 0x220E}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x2204}, 
+{0x20, 0x2510, 0xB042}, 
+{0x20, 0x2510, 0xA9A1}, 
+{0x20, 0x2510, 0x8008}, 
+{0x20, 0x2510, 0xB0D3}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0x916B}, 
+{0x20, 0x2510, 0x2008}, 
+{0x20, 0x2510, 0x32C1}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0xA044}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xA084}, 
+{0x20, 0x2510, 0x30D0}, 
+{0x20, 0x2510, 0x807C}, 
+{0x20, 0x2510, 0x3141}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3142}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3281}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3290}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3110}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3120}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3282}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x32A0}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x881B}, 
+{0x20, 0x2510, 0x887F}, 
+{0x20, 0x2510, 0xA08C}, 
+{0x20, 0x2510, 0x221F}, 
+{0x20, 0x2510, 0xA084}, 
+{0x20, 0x2510, 0x2440}, 
+{0x20, 0x2510, 0x3260}, 
+{0x20, 0x2510, 0x3248}, 
+{0x20, 0x2510, 0xB095}, 
+{0x20, 0x2510, 0xF110}, 
+{0x20, 0x2510, 0xF864}, 
+{0x20, 0x2510, 0xF90D}, 
+{0x20, 0x2510, 0x3084}, 
+{0x20, 0x2510, 0x32C1}, 
+{0x20, 0x2510, 0x3090}, 
+{0x20, 0x2510, 0x3088}, 
+{0x20, 0x2510, 0x2443}, 
+{0x20, 0x2510, 0x8058}, 
+{0x20, 0x2510, 0x3001}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0x3220}, 
+{0x20, 0x2510, 0x2002}, 
+{0x20, 0x2510, 0x8867}, 
+{0x20, 0x2510, 0x2004}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0x2441}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0xA9A0}, 
+{0x20, 0x2510, 0xB094}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0xA0C4}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xB980}, 
+{0x20, 0x2510, 0xA881}, 
+{0x20, 0x2510, 0xA8C1}, 
+{0x20, 0x2510, 0x8108}, 
+{0x20, 0x2510, 0xA105}, 
+{0x20, 0x2510, 0x30C1}, 
+{0x20, 0x2510, 0x2020}, 
+{0x20, 0x2510, 0x3101}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3104}, 
+{0x20, 0x2510, 0x3102}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0xF860}, 
+{0x20, 0x2510, 0xB095}, 
+{0x20, 0x2510, 0x2001}, 
+{0x20, 0x2510, 0xB988}, 
+{0x20, 0x2510, 0xB9F8}, 
+{0x20, 0x2510, 0xB9FC}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2001}, 
+{0x20, 0x2510, 0xB9FE}, 
+{0x20, 0x2510, 0xF905}, 
+{0x20, 0x2510, 0xF907}, 
+{0x20, 0x2510, 0x3202}, 
+{0x20, 0x2510, 0x880B}, 
+{0x20, 0x2510, 0xB397}, 
+{0x20, 0x2510, 0xF8E8}, 
+{0x20, 0x2510, 0x8188}, 
+{0x20, 0x2510, 0x9007}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2204}, 
+{0x20, 0x2510, 0xB137}, 
+{0x20, 0x2510, 0xB9B8}, 
+{0x20, 0x2510, 0xC801}, 
+{0x20, 0x2510, 0xE809}, 
+{0x20, 0x2510, 0xB177}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0xF8A8}, 
+{0x20, 0x2510, 0xF888}, 
+{0x20, 0x2510, 0x2203}, 
+{0x20, 0x2510, 0xA8C8}, 
+{0x20, 0x2510, 0xB07B}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x8188}, 
+{0x20, 0x2510, 0x8088}, 
+{0x20, 0x2510, 0x220B}, 
+{0x20, 0x2510, 0xB06A}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x2224}, 
+{0x20, 0x2510, 0xB04A}, 
+{0x20, 0x2510, 0x2218}, 
+{0x20, 0x2510, 0x210A}, 
+{0x20, 0x2510, 0x210A}, 
+{0x20, 0x2510, 0xB04B}, 
+{0x20, 0x2510, 0x902F}, 
+{0x20, 0x2510, 0xF880}, 
+{0x20, 0x2510, 0x2211}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x2204}, 
+{0x20, 0x2510, 0xB043}, 
+{0x20, 0x2510, 0xA8C1}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0x2200}, 
+{0x20, 0x2510, 0x8048}, 
+{0x20, 0x2510, 0x2103}, 
+{0x20, 0x2510, 0x916F}, 
+{0x20, 0x2510, 0x2106}, 
+{0x20, 0x2510, 0x884B}, 
+{0x20, 0x2510, 0x210A}, 
+{0x20, 0x2510, 0xA8C1}, 
+{0x20, 0x2510, 0x2440}, 
+{0x20, 0x2510, 0xF110}, 
+{0x20, 0x2510, 0xF804}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x8008}, 
+{0x20, 0x2510, 0x2002}, 
+{0x20, 0x2510, 0x880B}, 
+{0x20, 0x2510, 0x3002}, 
+{0x20, 0x2510, 0xB988}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0x3210}, 
+{0x20, 0x2510, 0x2206}, 
+{0x20, 0x2510, 0x2441}, 
+{0x20, 0x2510, 0xA8C1}, 
+{0x20, 0x2510, 0xF1CB}, 
+{0x20, 0x2510, 0xF1CC}, 
+{0x20, 0x2510, 0xF1CC}, 
+{0x20, 0x2510, 0x2010}, 
+{0x20, 0x2510, 0x8088}, 
+{0x20, 0x2510, 0x200C}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x2005}, 
+{0x20, 0x2510, 0xA8D0}, 
+{0x20, 0x2510, 0xB04B}, 
+{0x20, 0x2510, 0x3202}, 
+{0x20, 0x2510, 0xF880}, 
+{0x20, 0x2510, 0xB980}, 
+{0x20, 0x2510, 0xC800}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0xE80C}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0xB04A}, 
+{0x20, 0x2510, 0x2213}, 
+{0x20, 0x2510, 0x2225}, 
+{0x20, 0x2510, 0x8088}, 
+{0x20, 0x2510, 0x2205}, 
+{0x20, 0x2510, 0x888B}, 
+{0x20, 0x2510, 0x2203}, 
+{0x20, 0x2510, 0x3241}, 
+{0x20, 0x2510, 0x902F}, 
+{0x20, 0x2510, 0x2206}, 
+{0x20, 0x2510, 0x2204}, 
+{0x20, 0x2510, 0xB042}, 
+{0x20, 0x2510, 0xA9A1}, 
+{0x20, 0x2510, 0x8058}, 
+{0x20, 0x2510, 0xB093}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0x916B}, 
+{0x20, 0x2510, 0x2007}, 
+{0x20, 0x2510, 0x3084}, 
+{0x20, 0x2510, 0x32C1}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0xA144}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0xB800}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x30D0}, 
+{0x20, 0x2510, 0xA184}, 
+{0x20, 0x2510, 0xB980}, 
+{0x20, 0x2510, 0x807C}, 
+{0x20, 0x2510, 0x3141}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3142}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3281}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3290}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x3042}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3110}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3120}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x3282}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x32A0}, 
+{0x20, 0x2510, 0x3041}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x881B}, 
+{0x20, 0x2510, 0x887F}, 
+{0x20, 0x2510, 0x2440}, 
+{0x20, 0x2510, 0x3260}, 
+{0x20, 0x2510, 0x3248}, 
+{0x20, 0x2510, 0xB095}, 
+{0x20, 0x2510, 0xF110}, 
+{0x20, 0x2510, 0xF864}, 
+{0x20, 0x2510, 0xF90D}, 
+{0x20, 0x2510, 0x32C2}, 
+{0x20, 0x2510, 0x30A0}, 
+{0x20, 0x2510, 0x3090}, 
+{0x20, 0x2510, 0x3088}, 
+{0x20, 0x2510, 0x2443}, 
+{0x20, 0x2510, 0x8058}, 
+{0x20, 0x2510, 0x3001}, 
+{0x20, 0x2510, 0x2202}, 
+{0x20, 0x2510, 0x885B}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0x3220}, 
+{0x20, 0x2510, 0x2003}, 
+{0x20, 0x2510, 0x8058}, 
+{0x20, 0x2510, 0x2001}, 
+{0x20, 0x2510, 0x885B}, 
+{0x20, 0x2510, 0x2441}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0x2007}, 
+{0x20, 0x2510, 0x8018}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x881B}, 
+{0x20, 0x2510, 0x2008}, 
+{0x20, 0x2510, 0x801A}, 
+{0x20, 0x2510, 0x200A}, 
+{0x20, 0x2510, 0x8002}, 
+{0x20, 0x2510, 0xA9A1}, 
+{0x20, 0x2510, 0xB094}, 
+{0x20, 0x2510, 0x2201}, 
+{0x20, 0x2510, 0x8803}, 
+{0x20, 0x2510, 0xA1C4}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0xB800}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x3141}, 
+{0x20, 0x2510, 0xA005}, 
+{0x20, 0x2510, 0xC800}, 
+{0x20, 0x2510, 0xE802}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0x2440}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0xC801}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0x31C1}, 
+{0x20, 0x2510, 0xA044}, 
+{0x20, 0x2510, 0x3044}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0xA004}, 
+{0x20, 0x2510, 0x2000}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2703}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2424}, 
+{0x20, 0x2510, 0x2703}, 
+{0x20, 0x2510, 0x2427}, 
+{0x20, 0x2510, 0x2704}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2424}, 
+{0x20, 0x2510, 0x2704}, 
+{0x20, 0x2510, 0x2427}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2703}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2703}, 
+{0x20, 0x2510, 0x2421}, 
+{0x20, 0x2510, 0x2704}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2704}, 
+{0x20, 0x2510, 0x2421}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xB095}, 
+{0x20, 0x2510, 0xF110}, 
+{0x20, 0x2510, 0xF864}, 
+{0x20, 0x2510, 0xF90D}, 
+{0x20, 0x2510, 0x3001}, 
+{0x20, 0x2510, 0x2442}, 
+{0x20, 0x2510, 0x30C2}, 
+{0x20, 0x2510, 0xA9A0}, 
+{0x20, 0x2510, 0xB094}, 
+{0x20, 0x2510, 0xB800}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x2759}, 
+{0x20, 0x2510, 0x2422}, 
+{0x20, 0x2510, 0x2758}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2403}, 
+{0x20, 0x2510, 0x2712}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2422}, 
+{0x20, 0x2510, 0x271A}, 
+{0x20, 0x2510, 0x3242}, 
+{0x20, 0x2510, 0x2420}, 
+{0x20, 0x2510, 0x2702}, 
+{0x20, 0x2510, 0x2423}, 
+{0x20, 0x2510, 0x2759}, 
+{0x20, 0x2510, 0x2425}, 
+{0x20, 0x2510, 0x2758}, 
+{0x20, 0x2510, 0x2426}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0x7FFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF},
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0xFFFF}, 
+{0x20, 0x2510, 0x3433}, 
+{0x20, 0x2510, 0x360D}, 
+{0x20, 0x3E6E, 0xE200},
+{0x20, 0x3E98, 0x1000},
+{0x20, 0x3F92, 0x4C00},
+{0x20, 0x30B8, 0x000F},
+{0x20, 0x30B8, 0x0006},
+{0x20, 0x30B4, 0x0000},
+{0x20, 0x3082, 0x0000},
+{0x20, 0x30BA, 0x1120},
+{0x20, 0x31AC, 0x0C0C},
+{0x20, 0x3030, 0x004B},
+{0x20, 0x302E, 0x0005},
+{0x20, 0x302C, 0x0701},
+{0x20, 0x302A, 0x0006},
+{0x20, 0x3038, 0x0002},
+{0x20, 0x3036, 0x0006},
+{0x20, 0x31DC, 0x1FA0},
+{0x20, 0x31AE, 0x0204},
+{0x20, 0x31B0, 0x0033},
+{0x20, 0x31B2, 0x0020},
+{0x20, 0x31B4, 0x3144},
+{0x20, 0x31B6, 0x2143},
+{0x20, 0x31B8, 0x30C7},
+{0x20, 0x31BA, 0x0185},
+{0x20, 0x31BC, 0x8584},
+{0x20, 0x3342, 0x122C},
+{0x20, 0x3346, 0x122C},
+{0x20, 0x334A, 0x122C},
+{0x20, 0x334E, 0x122C},
+{0x20, 0x3004, 0x0048},
+{0x20, 0x3008, 0x07C7},
+{0x20, 0x3002, 0x0068},
+{0x20, 0x3006, 0x049F},
+{0x20, 0x3044, 0x0400},
+{0x20, 0x300C, 0x0688},
+{0x20, 0x300A, 0x0542},
+{0x20, 0x3012, 0x02A0},
+{0x20, 0x31D0, 0x0000},
+{0x20, 0x301A, 0x005C},
+{0x20, 0x3040, 0xC005},
+{0x00, AR0233_TABLE_END, 0x00 }
+};
+
+static struct index_reg_8 ar0233_init_ser[] = {
+    {0x80, 0x03F1, 0x89}, // Make MFP4 a source of the PCLK signal
+    {0x80, 0x0570, 0x0C}, // Make MFP4 as fast as possible
+    {0x80, 0x02BE, 0x90}, // GPIOA is driven to 1 and 1Mom pull down/up
+    {0x80, 0x02BE, 0x91}, // Enable GPIO driver
+    {0x80, 0x0010, 0x21}, // GMSL reset
+    {0x80, AR0233_TABLE_WAIT_MS, 10},
+    {0x80, 0x0002, 0x03}, // Disable video transmission
+    {0x80, 0x0110, 0x60}, // VIDEO TX 0
+    {0x80, 0x0334, 0x20}, // Lane 3 reverse polarity
+    {0x80, 0x0335, 0x01}, // Lane 0 reverse polarity
+    {0x80, 0x0002, 0x43}, // Vide0 transmit en
+    {0x80, 0x0111, 0x0C}, // 12 BPP (bits per pixel)
+    {0x00, AR0233_TABLE_END, 0x00 }
+};
+
+static struct index_reg_8 ar0233_init_des[] = {
+     {0x52, 0x0013, 0x40}, //100
+     {0x52, 0x0010, 0x11}, //50
+     {0x52, 0x0018, 0x0F}, //50
+     {0x52, 0x040B, 0x00}, //100
+     {0x52, 0x040E, 0x80}, //1
+     {0x52, 0x040F, 0x0C}, //1
+     {0x52, 0x0411, 0x30}, //1
+     {0x52, 0x0418, 0xE5}, //1
+     {0x52, 0x03F1, 0x89}, //1
+     {0x52, 0x0570, 0x0C}, //1
+    {0x52, 0x02BE, 0x90}, //1
+    {0x52, 0x02BE, 0x91}, //1
+    {0x52, 0x0006, 0x11}, //1
+    {0x52, 0x0050, 0x02}, //100
+    {0x52, 0x0051, 0x02}, //100
+    {0x52, 0x0052, 0x02}, //100
+    {0x52, 0x0050, 0x00}, //100
+    {0x52, 0x0051, 0x01}, //100
+    {0x52, 0x0053, 0x03}, //100
+    {0x52, 0x0053, 0x02}, //100
+    {0x52, 0x00F0, 0x62}, //1
+    {0x52, 0x00F1, 0xEA}, //1
+    {0x52, 0x00F4, 0x01}, //1
+    {0x52, 0x090B, 0x07}, //1
+    {0x52, 0x092D, 0x15}, //1
+    {0x52, 0x090D, 0x2C}, //1 
+    {0x52, 0x090E, 0x2C}, //1 
+    {0x52, 0x090F, 0x00}, //1 
+    {0x52, 0x0910, 0x00}, //1 
+    {0x52, 0x0911, 0x01}, //1 
+    {0x52, 0x0912, 0x01}, //1 
+    {0x52, 0x08A0, 0x24}, //1
+    {0x52, 0x08A3, 0xE4}, //1
+    {0x52, 0x08A4, 0xE4}, //1
+    {0x52, 0x090A, 0x01}, //1 
+    {0x52, 0x094A, 0xC0}, //1 
+    {0x52, 0x098A, 0xC0}, //1 
+    {0x52, 0x09CA, 0x01}, //1 
+    {0x52, 0x040B, 0x02}, //100
+    {0x52, 0x08A2, 0x30}, //1
+    {0x00, AR0233_TABLE_END, 0x00 }
+};
+
+enum {
+    AR0233_MODE_Init_Des,
+    AR0233_MODE_Init_Ser,
+    AR0233_MODE_Init_Sensor,
+	AR0233_MODE_TEST_PATTERN
+};
+
+static struct index_reg_8 *mode_table[] = {
+    [AR0233_MODE_Init_Des] = ar0233_init_des,
+    [AR0233_MODE_Init_Ser] = ar0233_init_ser,
+    [AR0233_MODE_Init_Sensor] = ar0233_sensor,
+};
+
+static const int ar0233_30fps[] = {
+	30,
+};
+
+static const struct camera_common_frmfmt ar0233_frmfmt[] = {
+	{{1920, 1080}, ar0233_30fps, 1, 0, AR0233_MODE_Init_Des},
+};
+#endif /* __AR0233_I2C_TABLES__ */
+    
\ No newline at end of file
diff --git a/drivers/media/i2c/max96712.c b/drivers/media/i2c/max96712.c
index 8e237eef..e635db82 100644
--- a/drivers/media/i2c/max96712.c
+++ b/drivers/media/i2c/max96712.c
@@ -21,12 +21,14 @@
 struct max96712 {
 	struct i2c_client *i2c_client;
 	struct regmap *regmap;
+    struct regmap *regmap_ser;
 	const char *channel;
 };
 static struct max96712 *global_priv[4];
 
 int max96712_write_reg_Dser(int slaveAddr, int channel, u16 addr, u8 val);
 int max96712_read_reg_Dser(int slaveAddr, int channel, u16 addr, unsigned int *val);
+int max96712_turn_off_ser_crypto(int slaveAddr, int channel);
 
 struct mutex max96712_rw;
 
@@ -85,6 +87,33 @@ int max96712_read_reg_Dser(int slaveAddr, int channel,
 }
 EXPORT_SYMBOL(max96712_read_reg_Dser);
 
+int max96712_turn_off_ser_crypto(int slaveAddr, int channel)
+{
+    struct i2c_client *i2c_client = NULL;
+	int bak = 0;
+	int err = 0;
+	/* unsigned int ival = 0; */
+
+	if (channel > 3 || channel < 0 || global_priv[channel] == NULL)
+		return -1;
+
+	mutex_lock(&max96712_rw);
+	i2c_client = global_priv[channel]->i2c_client;
+	bak = i2c_client->addr;
+
+	i2c_client->addr = slaveAddr / 2;
+	err = regmap_write(global_priv[channel]->regmap_ser, 0x0004, 0x0000079D);
+
+	i2c_client->addr = bak;
+	if (err) {
+		dev_err(&i2c_client->dev, "%s: addr = 0x%x, val = 0x%x\n",
+				__func__, 0x0004, 0x0000079D);
+	}
+	mutex_unlock(&max96712_rw);
+	return err;
+}
+EXPORT_SYMBOL(max96712_turn_off_ser_crypto);
+
 static int max96712_read_reg(struct max96712 *priv,
 			u16 addr, unsigned int *val)
 {
@@ -227,6 +256,11 @@ static  struct regmap_config max96712_regmap_config = {
 	.val_bits = 8,
 	.cache_type = REGCACHE_RBTREE,
 };
+static  struct regmap_config max96717_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 32,
+	.cache_type = REGCACHE_RBTREE,
+};
 
 #if defined(NV_I2C_DRIVER_STRUCT_PROBE_WITHOUT_I2C_DEVICE_ID_ARG) /* Linux 6.3 */
 static int max96712_probe(struct i2c_client *client)
@@ -244,11 +278,18 @@ static int max96712_probe(struct i2c_client *client,
 	priv->i2c_client = client;
 	priv->regmap = devm_regmap_init_i2c(priv->i2c_client,
 				&max96712_regmap_config);
+    priv->regmap_ser = devm_regmap_init_i2c(priv->i2c_client,
+				&max96717_regmap_config);
 	if (IS_ERR(priv->regmap)) {
 		dev_err(&client->dev,
 			"regmap init failed: %ld\n", PTR_ERR(priv->regmap));
 		return -ENODEV;
 	}
+	if (IS_ERR(priv->regmap_ser)) {
+		dev_err(&client->dev,
+			"regmap_ser init failed: %ld\n", PTR_ERR(priv->regmap_ser));
+		return -ENODEV;
+	}
 
 	mutex_init(&max96712_rw);
 
diff --git a/drivers/media/i2c/nv_ar0233.c b/drivers/media/i2c/nv_ar0233.c
new file mode 100644
index 00000000..0e26120d
--- /dev/null
+++ b/drivers/media/i2c/nv_ar0233.c
@@ -0,0 +1,657 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// SPDX-FileCopyrightText: Copyright (c) 2018-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+/*
+ * ar0233.c - ar0233 sensor driver
+ */
+
+#include "linux/delay.h"
+#include "linux/dev_printk.h"
+#include "linux/kernel.h"
+#include "linux/printk.h"
+#include "linux/stddef.h"
+#include <nvidia/conftest.h>
+
+#define DEBUG 1
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+
+#include <linux/seq_file.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+
+#include <media/max9295.h>
+#include <media/max9296.h>
+
+#include <media/tegracam_core.h>
+#include "ar0233_mode_tbls.h"
+
+#define CHANNEL_N 13
+#define AR0233_EXPOSURE_REG     (0x3012)
+#define AR0233_GAIN_REG         (0x305E)
+
+extern int max96712_write_reg_Dser(int slaveAddr, int channel,
+					u16 addr, u8 val);
+
+extern int max96712_read_reg_Dser(int slaveAddr, int channel,
+					u16 addr, unsigned int *val);
+extern int max96712_turn_off_ser_crypto(int slaveAddr, int channel);
+
+
+const struct of_device_id ar0233_of_match[] = {
+	{.compatible = "onsemi,ar0233",},
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ar0233_of_match);
+
+static const u32 ctrl_cid_list[] = {
+	TEGRA_CAMERA_CID_GAIN,
+	TEGRA_CAMERA_CID_EXPOSURE,
+	TEGRA_CAMERA_CID_EXPOSURE_SHORT,
+	TEGRA_CAMERA_CID_HDR_EN,
+};
+
+struct ar0233 {
+	struct camera_common_eeprom_data eeprom[AR0233_EEPROM_NUM_BLOCKS];
+	u8	eeprom_buf[AR0233_EEPROM_SIZE];
+	struct i2c_client	*i2c_client;
+	const struct i2c_device_id *id;
+	struct v4l2_subdev	*subdev;
+	u32	frame_length;
+	struct camera_common_data	*s_data;
+	struct tegracam_device		*tc_dev;
+	u32	channel;
+	u32	sync_sensor_index;
+};
+
+static const struct regmap_config sensor_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 16,
+	.cache_type = REGCACHE_RBTREE,
+};
+
+static int test_mode;
+module_param(test_mode, int, 0644);
+
+static inline int ar0233_read_reg(struct camera_common_data *s_data,
+		u16 addr, u16 *val)
+{
+	int err = 0;
+	u32 reg_val = 0;
+
+	err = regmap_read(s_data->regmap, addr, &reg_val);
+	*val = reg_val & 0xFFFF;
+
+	return err;
+}
+
+static int ar0233_write_reg(struct ar0233 *priv,
+		u16 addr, u16 val)
+{
+	int err;
+	int bak;
+    struct device *dev = priv->s_data->dev;
+
+    bak = priv->i2c_client->addr;
+	//priv->i2c_client->addr = 0x10;
+    err = regmap_write(priv->s_data->regmap, addr, val);
+	priv->i2c_client->addr = bak;
+	if (err)
+		dev_err(dev, "%s:i2c write failed, 0x%x 0x%x = %x\n",
+				__func__,priv->i2c_client->addr, addr, val);
+
+	return err;
+}
+
+static int ar0233_write_table(struct ar0233 *priv,
+		const struct index_reg_8 table[])
+{
+	struct tegracam_device *tc_dev = priv->tc_dev;
+	struct device *dev = tc_dev->dev;
+	int i = 0;
+	int ret = 0;
+	int retry = 5;
+
+	dev_dbg(dev, "%s: channel %d, ", __func__, priv->channel);
+	while (table[i].source != 0x00) {
+		if (table[i].source == 0x20) {
+			retry = 1;
+
+			if (table[i].addr == AR0233_TABLE_WAIT_MS) {
+				dev_dbg(dev, "%s: sleep 500\n", __func__);
+				msleep(table[i].val);
+				i++;
+				continue;
+			}
+retry_sensor:
+			ret = ar0233_write_reg(priv, table[i].addr, table[i].val);
+			if (ret) {
+				retry--;
+				if (retry > 0) {
+					dev_warn(dev, "ar0233_write_reg: try %d\n", retry);
+					msleep(4);
+					goto retry_sensor;
+				}
+				return -1;
+			}
+
+			if (0x301a == table[i].addr || 0x3060 == table[i].addr)
+				msleep(100);
+		} else {
+			retry = 5;
+
+			if (priv->channel == CHANNEL_N)	{
+				i++;
+				continue;
+			}
+
+retry_serdes:
+			ret = max96712_write_reg_Dser(table[i].source,
+						priv->channel, table[i].addr,
+						(u8)table[i].val);
+			if (ret && (table[i].addr != 0x0000)) {
+				retry--;
+				if (retry > 0) {
+					dev_warn(dev, "max96712_write_reg_Dser: try %d\n", retry);
+					msleep(4);
+					goto retry_serdes;
+				}
+				return -1;
+			}
+			if (0x0010 == table[i].addr || 0x0000 == table[i].addr || 0x0013 == table[i].addr || 
+				0x0006 == table[i].addr || 0x0018 == table[i].addr || 0x0003 == table[i].addr)
+				msleep(300);
+			else
+				msleep(10);
+		}
+		i++;
+	}
+	return 0;
+}
+
+static int ar0233_power_on(struct camera_common_data *s_data)
+{
+	int err = 0;
+	struct camera_common_power_rail *pw = s_data->power;
+	struct camera_common_pdata *pdata = s_data->pdata;
+	struct device *dev = s_data->dev;
+
+	dev_err(dev, "%s: ON\n", __func__);
+	if (pdata && pdata->power_on) {
+		err = pdata->power_on(pw);
+		if (err)
+			dev_err(dev, "%s failed.\n", __func__);
+		else
+			pw->state = SWITCH_ON;
+		return err;
+	}
+
+	if (pw->reset_gpio > 0)
+		gpio_set_value(pw->reset_gpio, 1);
+
+	usleep_range(1000, 2000);
+	if (pw->reset_gpio > 0)
+		gpio_set_value(pw->reset_gpio, 1);
+
+	usleep_range(10000, 20000);
+	pw->state = SWITCH_ON;
+
+	return 0;
+}
+
+static int ar0233_power_off(struct camera_common_data *s_data)
+{
+	int err = 0;
+	struct camera_common_power_rail *pw = s_data->power;
+	struct camera_common_pdata *pdata = s_data->pdata;
+	struct device *dev = s_data->dev;
+
+	dev_err(dev, "%s: OFF\n", __func__);
+	if (pdata && pdata->power_off) {
+		err = pdata->power_off(pw);
+		if (!err)
+			goto power_off_done;
+		else
+			dev_err(dev, "%s failed.\n", __func__);
+		return err;
+	}
+
+power_off_done:
+	pw->state = SWITCH_OFF;
+
+	return 0;
+}
+
+static int ar0233_power_get(struct tegracam_device *tc_dev)
+{
+	struct device *dev = tc_dev->dev;
+	struct camera_common_data *s_data = tc_dev->s_data;
+	struct camera_common_power_rail *pw = s_data->power;
+	struct camera_common_pdata *pdata = s_data->pdata;
+	const char *mclk_name;
+	const char *parentclk_name;
+	struct clk *parent;
+	int err = 0;
+
+	mclk_name = pdata->mclk_name ?
+		pdata->mclk_name : "cam_mclk1";
+	pw->mclk = devm_clk_get(dev, mclk_name);
+	if (IS_ERR(pw->mclk)) {
+		dev_err(dev, "unable to get clock %s\n", mclk_name);
+		return PTR_ERR(pw->mclk);
+	}
+
+	parentclk_name = pdata->parentclk_name;
+	if (parentclk_name) {
+		parent = devm_clk_get(dev, parentclk_name);
+		if (IS_ERR(parent)) {
+			dev_err(dev, "unable to get parent clcok %s",
+					parentclk_name);
+		} else {
+			err = clk_set_parent(pw->mclk, parent);
+			if (err < 0)
+				dev_dbg(dev,
+					"%s failed to set parent clock %d\n",
+					__func__, err);
+		}
+	}
+	if (!err) {
+		pw->reset_gpio = pdata->reset_gpio;
+		pw->af_gpio = pdata->af_gpio;
+		pw->pwdn_gpio = pdata->pwdn_gpio;
+	}
+
+	pw->state = SWITCH_OFF;
+
+	return err;
+}
+
+static int ar0233_power_put(struct tegracam_device *tc_dev)
+{
+	struct camera_common_data *s_data = tc_dev->s_data;
+	struct camera_common_power_rail *pw = s_data->power;
+
+	if (unlikely(!pw))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int ar0233_set_group_hold(struct tegracam_device *tc_dev, bool val)
+{
+	struct device *dev = tc_dev->dev;
+	int err = 0;
+
+	if (err) {
+		dev_dbg(dev, "%s: Group hold control error\n", __func__);
+		return err;
+	}
+
+	return 0;
+}
+
+static int ar0233_set_gain(struct tegracam_device *tc_dev, s64 val)
+{
+	struct ar0233 *priv = (struct ar0233 *)tegracam_get_privdata(tc_dev);
+    ar0233_reg reg_list[1];
+	int err;
+
+    reg_list[0].addr = AR0233_GAIN_REG;
+    reg_list[0].val = (uint16_t)(val & 0xFFFF);;
+
+    dev_err(&priv->i2c_client->dev, "New gain: %d\n", reg_list[0].val);
+	err = ar0233_write_reg(priv, reg_list[0].addr,
+			reg_list[0].val);
+	if (err) {
+		goto fail;
+    }
+
+	return 0;
+
+fail:
+	dev_err(&priv->i2c_client->dev,
+			"%s: set new gain error\n", __func__);
+	return err;
+}
+
+static int ar0233_set_exposure(struct tegracam_device *tc_dev, s64 val)
+{
+	struct ar0233 *priv = (struct ar0233 *)tegracam_get_privdata(tc_dev);
+    ar0233_reg reg_list[1];
+	int err;
+
+    reg_list[0].addr = AR0233_EXPOSURE_REG;
+    reg_list[0].val = (uint16_t)(val & 0xFFFF);;
+
+    dev_err(&priv->i2c_client->dev, "New exposure: %d\n", reg_list[0].val);
+	err = ar0233_write_reg(priv, reg_list[0].addr,
+			reg_list[0].val);
+	if (err) {
+		goto fail;
+    }
+
+	return 0;
+
+fail:
+	dev_err(&priv->i2c_client->dev,
+			"%s: set new exposure error\n", __func__);
+	return err;
+}
+
+static struct tegracam_ctrl_ops ar0233_ctrl_ops = {
+	.numctrls = ARRAY_SIZE(ctrl_cid_list),
+	.ctrl_cid_list = ctrl_cid_list,
+	.set_gain = ar0233_set_gain,
+	.set_exposure = ar0233_set_exposure,
+	.set_exposure_short = ar0233_set_exposure,
+	.set_group_hold = ar0233_set_group_hold,
+};
+
+static struct camera_common_pdata *ar0233_parse_dt(struct tegracam_device *tc_dev)
+{
+	struct device *dev = tc_dev->dev;
+	struct device_node *node = dev->of_node;
+	struct camera_common_pdata *board_priv_pdata;
+	const struct of_device_id *match;
+	int err;
+	int gpio = 0;
+
+	if (!node)
+		return NULL;
+
+	match = of_match_device(ar0233_of_match, dev);
+	if (!match) {
+		dev_err(dev, "Failed to find matching dt id\n");
+		return NULL;
+	}
+
+	board_priv_pdata = devm_kzalloc(dev, sizeof(*board_priv_pdata), GFP_KERNEL);
+
+	err = of_property_read_string(node, "mclk",
+			&board_priv_pdata->mclk_name);
+	if (err)
+		dev_err(dev, "mclk not in DT\n");
+
+	board_priv_pdata->reset_gpio = of_get_named_gpio(node,
+			"reset-gpios", 0);
+	gpio_direction_output(board_priv_pdata->reset_gpio, 1);
+
+	gpio = of_get_named_gpio(node,
+			"pwdn-gpios", 0);
+
+	gpio_direction_output(gpio, 1);
+	gpio = of_get_named_gpio(node,
+			"pwr-gpios", 0);
+
+	gpio_direction_output(gpio, 1);
+
+	board_priv_pdata->has_eeprom =
+		of_property_read_bool(node, "has-eeprom");
+	return board_priv_pdata;
+}
+
+static int ar0233_set_mode(struct tegracam_device *tc_dev)
+{
+	// struct ar0233 *priv = (struct ar0233 *)tegracam_get_privdata(tc_dev);
+    // struct camera_common_data *s_data = tc_dev->s_data;
+	struct device *dev = tc_dev->dev;
+	// const struct of_device_id *match;
+	// int err;
+	dev_err(dev, "set mode\n");
+
+	// match = of_match_device(ar0233_of_match, dev);
+	// if (!match) {
+	// 	dev_err(dev, "Failed to find matching dt id\n");
+	// 	return -EINVAL;
+	// }
+
+	// err = ar0233_write_table(priv, mode_table[AR0233_MODE_STOP_STREAM]);
+	// if (err)
+	// 	return err;
+
+	// if (s_data->mode_prop_idx < 0)
+	// 	return -EINVAL;
+	// dev_dbg(dev, "%s: mode index:%d\n", __func__, s_data->mode_prop_idx);
+	// err = ar0233_write_table(priv, mode_table[s_data->mode_prop_idx]);
+	// if (err)
+	// 	return err;
+
+	return 0;
+}
+
+static int ar0233_start_streaming(struct tegracam_device *tc_dev)
+{
+	struct ar0233 *priv = (struct ar0233 *)tegracam_get_privdata(tc_dev);
+    dev_err(&priv->i2c_client->dev, "start stream");
+
+	return 0;
+
+}
+
+static int ar0233_stop_streaming(struct tegracam_device *tc_dev)
+{
+	struct ar0233 *priv = (struct ar0233 *)tegracam_get_privdata(tc_dev);
+    dev_err(&priv->i2c_client->dev, "stop stream");
+
+	return 0;
+}
+
+static struct camera_common_sensor_ops ar0233_common_ops = {
+	.numfrmfmts = ARRAY_SIZE(ar0233_frmfmt),
+	.frmfmt_table = ar0233_frmfmt,
+	.power_on = ar0233_power_on,
+	.power_off = ar0233_power_off,
+	.parse_dt = ar0233_parse_dt,
+	.power_get = ar0233_power_get,
+	.power_put = ar0233_power_put,
+	.set_mode = ar0233_set_mode,
+	.start_streaming = ar0233_start_streaming,
+	.stop_streaming = ar0233_stop_streaming,
+};
+
+static int ar0233_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	return 0;
+}
+
+static int ar0233_eeprom_device_release(struct ar0233 *priv)
+{
+	int i;
+
+	for (i = 0; i < AR0233_EEPROM_NUM_BLOCKS; i++) {
+		if (priv->eeprom[i].i2c_client != NULL) {
+			i2c_unregister_device(priv->eeprom[i].i2c_client);
+			priv->eeprom[i].i2c_client = NULL;
+		}
+	}
+
+	return 0;
+}
+
+static const struct v4l2_subdev_internal_ops ar0233_subdev_internal_ops = {
+	.open = ar0233_open,
+};
+
+static int ar0233_board_setup(struct ar0233 *priv)
+{
+	struct camera_common_data *s_data = priv->s_data;
+	struct device *dev = s_data->dev;
+	int err = 0;
+
+	dev_dbg(dev, "%s++\n", __func__);
+
+	err = camera_common_mclk_enable(s_data);
+	if (err) {
+		dev_err(dev, "Error %d turning on mclk\n", err);
+		return err;
+	}
+
+	err = ar0233_power_on(s_data);
+	if (err) {
+		dev_err(dev, "Error %d during power on sensor\n", err);
+		return err;
+	}
+
+	ar0233_power_off(s_data);
+	camera_common_mclk_disable(s_data);
+	return err;
+}
+
+
+
+#if defined(NV_I2C_DRIVER_STRUCT_PROBE_WITHOUT_I2C_DEVICE_ID_ARG) /* Linux 6.3 */
+static int ar0233_probe(struct i2c_client *client)
+#else
+static int ar0233_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+#endif
+{
+	struct device *dev = &client->dev;
+	struct device_node *node = dev->of_node;
+	struct tegracam_device *tc_dev;
+	struct ar0233 *priv;
+	const char *str;
+    int err;
+
+	dev_info(dev, "probing v4l2 sensor.\n");
+
+	if (!IS_ENABLED(CONFIG_OF) || !node)
+		return -EINVAL;
+
+	priv = devm_kzalloc(dev, sizeof(struct ar0233), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	tc_dev = devm_kzalloc(dev,
+			sizeof(struct tegracam_device), GFP_KERNEL);
+	if (!tc_dev)
+		return -ENOMEM;
+
+	err = of_property_read_string(node, "channel", &str);
+	if (err)
+		dev_err(dev, "channel not found\n");
+	priv->channel = str[0] - 'a';
+	dev_dbg(dev, "%s: channel %d\n", __func__, priv->channel);
+
+
+	err = of_property_read_u32(node, "sync_sensor_index",
+			&priv->sync_sensor_index);
+	if (err)
+		dev_err(dev, "sync name index not in DT\n");
+
+	priv->i2c_client = tc_dev->client = client;
+	tc_dev->dev = dev;
+	strncpy(tc_dev->name, "ar0233", sizeof(tc_dev->name));
+	tc_dev->dev_regmap_config = &sensor_regmap_config;
+	tc_dev->sensor_ops = &ar0233_common_ops;
+	tc_dev->v4l2sd_internal_ops = &ar0233_subdev_internal_ops;
+	tc_dev->tcctrl_ops = &ar0233_ctrl_ops;
+
+	err = tegracam_device_register(tc_dev);
+	if (err) {
+		dev_err(dev, "tegra camera driver registration failed\n");
+		return err;
+	}
+	priv->tc_dev = tc_dev;
+	priv->s_data = tc_dev->s_data;
+	priv->subdev = &tc_dev->s_data->subdev;
+	tegracam_set_privdata(tc_dev, (void *)priv);
+
+	ar0233_power_on(tc_dev->s_data);
+	msleep(100);
+
+	err = ar0233_write_table(priv, mode_table[AR0233_MODE_Init_Des]);
+	if (err) {
+		dev_info(&client->dev, "dual camera detect error\n");
+		return err;
+	}
+    /* TODO: it should be relocated to ar0233 moduled */
+    max96712_turn_off_ser_crypto(0x80, priv->channel);
+
+	err = ar0233_write_table(priv, mode_table[AR0233_MODE_Init_Ser]);
+	if (err) {
+		dev_info(&client->dev, "dual camera detect error\n");
+		return err;
+	}
+
+    err = ar0233_write_table(priv, mode_table[AR0233_MODE_Init_Sensor]);
+	if (err) {
+		dev_info(&client->dev, "dual camera detect error\n");
+		return err;
+	}
+
+	dev_info(&client->dev, "dual camera detect success\n");
+
+	msleep(100);
+	err = ar0233_board_setup(priv);
+	if (err) {
+		dev_err(dev, "board setup failed\n");
+		return err;
+	}
+
+	err = tegracam_v4l2subdev_register(tc_dev, true);
+	if (err) {
+		dev_err(dev, "tegra camera subdev registration failed\n");
+		return err;
+	}
+
+	dev_info(&client->dev, "Detected AR0233 sensor\n");
+
+	return 0;
+}
+
+#if defined(NV_I2C_DRIVER_STRUCT_REMOVE_RETURN_TYPE_INT) /* Linux 6.1 */
+static int ar0233_remove(struct i2c_client *client)
+#else
+static void ar0233_remove(struct i2c_client *client)
+#endif
+{
+	struct camera_common_data *s_data = to_camera_common_data(&client->dev);
+	struct ar0233 *priv;
+
+	if (!s_data)
+#if defined(NV_I2C_DRIVER_STRUCT_REMOVE_RETURN_TYPE_INT) /* Linux 6.1 */
+		return -EINVAL;
+#else
+		return;
+#endif
+
+	priv = (struct ar0233 *)s_data->priv;
+	tegracam_v4l2subdev_unregister(priv->tc_dev);
+	tegracam_device_unregister(priv->tc_dev);
+	ar0233_eeprom_device_release(priv);
+#if defined(NV_I2C_DRIVER_STRUCT_REMOVE_RETURN_TYPE_INT) /* Linux 6.1 */
+	return 0;
+#endif
+}
+
+static const struct i2c_device_id ar0233_id[] = {
+	{ "ar0233", 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, ar0233_id);
+
+static struct i2c_driver ar0233_i2c_driver = {
+	.driver = {
+		.name = "ar0233",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(ar0233_of_match),
+	},
+	.probe = ar0233_probe,
+	.remove = ar0233_remove,
+	.id_table = ar0233_id,
+};
+
+module_i2c_driver(ar0233_i2c_driver);
+
+MODULE_DESCRIPTION("Media Controller driver for Sony AR0233");
+MODULE_AUTHOR("NVIDIA Corporation");
+MODULE_AUTHOR("Nikita Pichugin <nikita.pichugin@p3m.com");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/platform/tegra/camera/tegracam_ctrls.c b/drivers/media/platform/tegra/camera/tegracam_ctrls.c
index 240daa9a..a54083cf 100644
--- a/drivers/media/platform/tegra/camera/tegracam_ctrls.c
+++ b/drivers/media/platform/tegra/camera/tegracam_ctrls.c
@@ -300,7 +300,7 @@ static int tegracam_set_ctrls(struct tegracam_ctrl_handler *handler,
 	struct sensor_control_properties *ctrlprops = NULL;
 	int err = 0;
 	u32 status = 0;
-
+    // dev_err(s_data->dev, "tegracam_set_ctrls was called! \n");
 	/* For controls that are independent of power state */
 	switch (ctrl->id) {
 	case TEGRA_CAMERA_CID_SENSOR_MODE_ID:
@@ -315,7 +315,7 @@ static int tegracam_set_ctrls(struct tegracam_ctrl_handler *handler,
 		dev_err(s_data->dev, "power status query unsupported\n");
 		return -ENOTTY;
 	}
-
+    //dev_err(s_data->dev, "Power status: %d\n", status);
 	/* power state is turned off, do not program sensor now */
 	if (!status)
 		return 0;
